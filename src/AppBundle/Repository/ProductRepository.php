<?php

namespace AppBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function myFindAll()
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.images', 'i')
            ->addSelect('i')
            ->leftJoin('p.orders', 'o')
            ->addSelect('o')
            ->getQuery()
            ->getResult()
            ;
    }

    public function myFindOne($id)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.images', 'i')
            ->addSelect('i')
            ->leftJoin('p.bids', 'b')
            ->addSelect('b')
            ->where('p.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult()
            ;
    }

    public function myFindOneBids($id)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.bids', 'b')
            ->addSelect('b')
            ->where('p.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult()
            ;
    }

    public function myFindBidMax($id)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.bids', 'b')
            ->addSelect('b')
            ->where('p.id = :id')
            ->setParameter('id', $id)
            ->orderBy('b.bidAccount', 'DESC','b.created', 'ASC')
            //->orderBy('b.created', 'ASC')
            ->setFirstResult( 0 )
            ->setMaxResults( 2 )
            ->getQuery()
            ->getResult()
            ;
    }



    public function myFindBidMaxFinal($id)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.bids', 'b')
            ->addSelect('b')
            ->where('p.id = :id')
            ->setParameter('id', $id)
            ->orderBy('b.bidAccount', 'DESC','b.created', 'ASC')
            //->orderBy('b.created', 'ASC')
            ->setFirstResult( 0 )
            ->setMaxResults( 1 )
            ->getQuery()
            ->getResult()
            ;
    }

    public function myProducts($id)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.images', 'i')
            ->addSelect('i')
            ->leftJoin('p.orders', 'o')
            ->addSelect('o')
            ->where('p.user = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getResult()
            ;
    }

    public function myOrders()
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.orders', 'o')
            ->addSelect('o')
            ->getQuery()
            ->getResult()
            ;
    }

    public function ProductsByCategory($id)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.images', 'i')
            ->addSelect('i')
            ->leftJoin('p.orders', 'o')
            ->addSelect('o')
            ->where('p.category = :id')
            ->setParameter('id', $id)
            ->andWhere(' o.product is null')
            ->orderBy('p.biddingEnd', 'ASC')
            ->getQuery()
            ->getResult()
            ;
    }

    public function ProductsByName($title)
    {
        return $this
            ->createQueryBuilder('p')
            ->leftJoin('p.images', 'i')
            ->addSelect('i')
            ->leftJoin('p.orders', 'o')
            ->addSelect('o')
            ->where('p.title LIKE :title')
            ->setParameter('title', '%'.$title.'%')
            ->andWhere(' o.product is null')
            ->orderBy('p.biddingEnd', 'ASC')
            ->getQuery()
            ->getResult()
            ;
    }






}
